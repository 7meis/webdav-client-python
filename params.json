{
  "name": "webdavclient",
  "tagline": "",
  "body": "webdavclient\r\n============\r\n\r\n[![PyPI\r\nversion](https://badge.fury.io/py/webdavclient.svg)](http://badge.fury.io/py/webdavclient)\r\n[![Requirements\r\nStatus](https://requires.io/github/designerror/webdav-client-python/requirements.svg?branch=master&style=flat)](https://requires.io/github/designerror/webdav-client-python/requirements/?branch=master&style=flat)\r\n[![PullReview\r\nstats](https://www.pullreview.com/github/designerror/webdavclient/badges/master.svg?)](https://www.pullreview.com/github/designerror/webdavclient/reviews/master)\r\n\r\nPackage webdavclient provides easy and convenient work with WebDAV-servers (Yandex.Drive, Dropbox, Google Drive, Box, 4shared, etc.). The package includes the following components: webdav API, resource API and wdc.\r\n\r\nThe source code of the project can be found\r\n[here](https://github.com/designerror/webdavclient)\r\n![Github](https://github.com/favicon.ico)\r\n\r\nInstallation and upgrade\r\n======================\r\n\r\n**Installation**\r\n\r\n> Linux\r\n\r\n```bash\r\n$ sudo apt-get install libxml2-dev libxslt-dev python-dev\r\n$ sudo apt-get install libcurl4-openssl-dev python-pycurl \r\n$ sudo easy_install webdavclient\r\n```\r\n\r\n> macOS\r\n\r\n```bash\r\ncurl https://bootstrap.pypa.io/ez_setup.py -o - | python\r\npython setup.py install --prefix=/opt/setuptools\r\nsudo easy_install webdavclient\r\n```\r\n\r\n**Update**\r\n\r\n```bash\r\n$ sudo pip install -U webdavclient\r\n```\r\n\r\nWebdav API\r\n==========\r\n\r\nWebdav API is a set of webdav methods of work with cloud storage. This set includes the following methods: `check`, `free`, `info`, `list`, `mkdir`, `clean`, `copy`, `move`, `download`, `upload`, `publish` and `unpublish`.\r\n\r\n**Configuring the client**\r\n\r\nRequired keys for configuring client connection with WevDAV-server are webdav\\_hostname and webdav\\_login, webdav,\\_password.\r\n\r\n```python\r\nimport webdav.client as wc\r\noptions = {\r\n 'webdav_hostname': \"https://webdav.server.ru\",\r\n 'webdav_login':    \"login\",\r\n 'webdav_password': \"password\"\r\n}\r\nclient = wc.Client(options)\r\n```\r\n\r\nWhen a proxy server you need to specify settings to connect through it.\r\n\r\n```python\r\nimport webdav.client as wc\r\noptions = {\r\n 'webdav_hostname': \"https://webdav.server.ru\",\r\n 'webdav_login':    \"w_login\",\r\n 'webdav_password': \"w_password\", \r\n 'proxy_hostname':  \"http://127.0.0.1:8080\",\r\n 'proxy_login':     \"p_login\",\r\n 'proxy_password':  \"p_password\"\r\n}\r\nclient = wc.Client(options)\r\n```\r\n\r\nIf you want to use the certificate path to certificate and private key is defined as follows:\r\n\r\n```python\r\nimport webdav.client as wc\r\noptions = {\r\n 'webdav_hostname': \"https://webdav.server.ru\",\r\n 'webdav_login':    \"w_login\",\r\n 'webdav_password': \"w_password\",\r\n 'cert_path':       \"/etc/ssl/certs/certificate.crt\",\r\n 'key_path':        \"/etc/ssl/private/certificate.key\"\r\n}\r\nclient = wc.Client(options)\r\n```\r\n\r\nOr you want to limit the speed or turn on verbose mode:\r\n\r\n```python\r\noptions = {\r\n ...\r\n 'recv_speed' : 3000000,\r\n 'send_speed' : 3000000,\r\n 'verbose'    : True\r\n}\r\nclient = wc.Client(options)\r\n```\r\n\r\nrecv_speed: rate limit data download speed in Bytes per second. Defaults to unlimited speed.  \r\nsend_speed: rate limit data upload speed in Bytes per second. Defaults to unlimited speed.  \r\nverbose:    set verbose mode on/off. By default verbose mode is off.\r\n\r\n**Synchronous methods**\r\n\r\n```python\r\n// Checking existence of the resource\r\n\r\nclient.check(\"dir1/file1\")\r\nclient.check(\"dir1\")\r\n```\r\n\r\n```python\r\n// Get information about the resource\r\n\r\nclient.info(\"dir1/file1\")\r\nclient.info(\"dir1/\")\r\n```\r\n\r\n```python\r\n// Check free space\r\n\r\nfree_size = client.free()\r\n```\r\n\r\n```python\r\n// Get a list of resources\r\n\r\nfiles1 = client.list()\r\nfiles2 = client.list(\"dir1\")\r\n```\r\n\r\n```python\r\n// Create directory\r\n\r\nclient.mkdir(\"dir1/dir2\")\r\n```\r\n\r\n```python\r\n// Delete resource\r\n\r\nclient.clean(\"dir1/dir2\")\r\n```\r\n\r\n```python\r\n// Copy resource\r\n\r\nclient.copy(remote_path_from=\"dir1/file1\", remote_path_to=\"dir2/file1\")\r\nclient.copy(remote_path_from=\"dir2\", remote_path_to=\"dir3\")\r\n```\r\n\r\n```python\r\n// Move resource\r\n\r\nclient.move(remote_path_from=\"dir1/file1\", remote_path_to=\"dir2/file1\")\r\nclient.move(remote_path_from=\"dir2\", remote_path_to=\"dir3\")\r\n```\r\n\r\n```python\r\n// Move resource\r\n\r\nclient.download_sync(remote_path=\"dir1/file1\", local_path=\"~/Downloads/file1\")\r\nclient.download_sync(remote_path=\"dir1/dir2/\", local_path=\"~/Downloads/dir2/\")\r\n```\r\n\r\n```python\r\n// Unload resource\r\n\r\nclient.upload_sync(remote_path=\"dir1/file1\", local_path=\"~/Documents/file1\")\r\nclient.upload_sync(remote_path=\"dir1/dir2/\", local_path=\"~/Documents/dir2/\")\r\n```\r\n\r\n```python\r\n// Publish the resource\r\n\r\nlink = client.publish(\"dir1/file1\")\r\nlink = client.publish(\"dir2\")\r\n```\r\n\r\n```python\r\n// Unpublish resource\r\n\r\nclient.unpublish(\"dir1/file1\")\r\nclient.unpublish(\"dir2\")\r\n```\r\n\r\n```python\r\n// Exception handling\r\n\r\nfrom webdav.client import WebDavException\r\ntry:\r\n...\r\nexcept WebDavException as exception:\r\n...\r\n```\r\n\r\n```python\r\n// Get the missing files\r\n\r\nclient.pull(remote_directory='dir1', local_directory='~/Documents/dir1')\r\n```\r\n\r\n```python\r\n// Send missing files\r\n\r\nclient.push(remote_directory='dir1', local_directory='~/Documents/dir1')\r\n```\r\n\r\n**Asynchronous methods**\r\n\r\n```python\r\n// Load resource\r\n\r\nkwargs = {\r\n 'remote_path': \"dir1/file1\",\r\n 'local_path':  \"~/Downloads/file1\",\r\n 'callback':    callback\r\n}\r\nclient.download_async(**kwargs)\r\n\r\nkwargs = {\r\n 'remote_path': \"dir1/dir2/\",\r\n 'local_path':  \"~/Downloads/dir2/\",\r\n 'callback':    callback\r\n}\r\nclient.download_async(**kwargs)\r\n```\r\n\r\n```python\r\n// Unload resource\r\n\r\nkwargs = {\r\n 'remote_path': \"dir1/file1\",\r\n 'local_path':  \"~/Downloads/file1\",\r\n 'callback':    callback\r\n}\r\nclient.upload_async(**kwargs)\r\n\r\nkwargs = {\r\n 'remote_path': \"dir1/dir2/\",\r\n 'local_path':  \"~/Downloads/dir2/\",\r\n 'callback':    callback\r\n}\r\nclient.upload_async(**kwargs)\r\n```\r\n\r\nResource API\r\n============\r\n\r\nResource API using the concept of OOP that enables cloud-level resources.\r\n\r\n```python\r\n// Get a resource\r\n\r\nres1 = client.resource(\"dir1/file1\")\r\n```\r\n\r\n```python\r\n// Work with the resource\r\n\r\nres1.rename(\"file2\")\r\nres1.move(\"dir1/file2\")\r\nres1.copy(\"dir2/file1\")\r\ninfo = res1.info()\r\nres1.read_from(buffer)\r\nres1.read(local_path=\"~/Documents/file1\")\r\nres1.read_async(local_path=\"~/Documents/file1\", callback)\r\nres1.write_to(buffer)\r\nres1.write(local_path=\"~/Downloads/file1\")\r\nres1.write_async(local_path=\"~/Downloads/file1\", callback)\r\n```\r\n\r\nwdc\r\n===\r\n\r\nwdc - a cross-platform utility that provides convenient work with WebDAV-servers right from your console. In addition to full implementations of methods from webdav API, also added methods content sync local and remote directories.\r\n\r\n**Authentication**\r\n\r\n- *Basic authentication*\r\n```bash\r\n$ wdc login https://wedbav.server.ru -p http://127.0.0.1:8080\r\nwebdav_login: w_login\r\nwebdav_password: w_password\r\nproxy_login: p_login\r\nproxy_password: p_password\r\nsuccess\r\n```\r\n\r\n- Authorize the application using OAuth token*\r\n```bash\r\n$ wdc login https://wedbav.server.ru -p http://127.0.0.1:8080 --token xxxxxxxxxxxxxxxxxx\r\nproxy_login: p_login\r\nproxy_password: p_password\r\nsuccess\r\n```\r\n\r\nThere are also additional keys `--root[-r]`, `--cert-path[-c]` and `--key-path[-k]`.\r\n\r\n**Utility**\r\n\r\n```bash\r\n$ wdc check\r\nsuccess\r\n$ wdc check file1\r\nnot success\r\n$ wdc free\r\n245234120344\r\n$ wdc ls dir1\r\nfile1\r\n...\r\nfileN\r\n$ wdc mkdir dir2\r\n$ wdc copy dir1/file1 -t dir2/file1\r\n$ wdc move dir2/file1 -t dir2/file2\r\n$ wdc download dir1/file1 -t ~/Downloads/file1\r\n$ wdc download dir1/ -t ~/Downloads/dir1/\r\n$ wdc upload dir2/file2 -f ~/Documents/file1\r\n$ wdc upload dir2/ -f ~/Documents/\r\n$ wdc publish di2/file2\r\nhttps://yadi.sk/i/vWtTUcBucAc6k\r\n$ wdc unpublish dir2/file2\r\n$ wdc pull dir1/ -t ~/Documents/dir1/\r\n$ wdc push dir1/ -f ~/Documents/dir1/\r\n$ wdc info dir1/file1\r\n{'name': 'file1', 'modified': 'Thu, 23 Oct 2014 16:16:37 GMT',\r\n'size': '3460064', 'created': '2014-10-23T16:16:37Z'}\r\n```\r\nWebDAV-server\r\n=============\r\n\r\nThe most popular cloud-based repositories that support the Protocol WebDAV can be attributed Yandex.Drive, Dropbox, Google Drive, Box and 4shared. Access to data repositories, operating with access to the Internet. If necessary local locations and cloud storage, you can deploy your own WebDAV-server.\r\n\r\n**Local WebDAV-server**\r\n\r\nTo deploy a local WebDAV server, using Docker containers\r\nquite easily and quickly. To see an example of a local deploymentWebDAV servers can be on the project [webdav-server-docker](https://github.com/designerror/webdav-server-docker).\r\n\r\n**Supported methods**\r\n\r\nServers |free|info|list|mkdir|clean|copy|move|download|upload \r\n:------------|:--:|:--:|:--:|:---:|:---:|:--:|:--:|:------:|:----:\r\nYandex.Disk| \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ \r\nDropbox| \\- | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ \r\nGoogle Drive| \\- | \\+ | \\+ | \\+ | \\+ | \\- | \\- | \\+ | \\+ \r\nBox| \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+ | \\+\r\n4shared| \\- | \\+ | \\+ | \\+ | \\+ | \\- | \\- | \\+ | \\+ \r\nWebdavserver| \\- | \\+ | \\+ | \\+ | \\+ | \\- | \\- | \\+ | \\+ \r\n\r\nPublish and unpublish methods supports only Yandex.Disk.\r\n\r\n**Configuring connections**\r\n\r\nTo work with cloud storage Dropbox and Google Drive via the WebDAV Protocol, you must use a WebDAV-server DropDAV and DAV-pocket, respectively.\r\n\r\nA list of settings for WebDAV servers:\r\n\r\n```yaml\r\nwebdav-servers:\r\n - yandex\r\n    hostname: https://webdav.yandex.ru\r\n    login:    #login_for_yandex\r\n    password: #pass_for_yandex\r\n - dropbox \r\n    hostname: https://dav.dropdav.com\r\n    login:    #login_for dropdav\r\n    password: #pass_for_dropdav\r\n - google\r\n    hostname: https://dav-pocket.appspot.com\r\n    root:     docso\r\n    login:    #login_for_dav-pocket\r\n    password: #pass_for_dav-pocket\r\n - box\r\n    hostname: https://dav.box.com\r\n    root:     dav\r\n    login:    #login_for_box\r\n    password: #pass_for_box\r\n - 4shared\r\n    hostname: https://webdav.4shared.com\r\n    login:    #login_for_4shared\r\n    password: #pass_for_4shared\r\n```\r\n\r\nAutocompletion\r\n==============\r\n\r\nFor macOS, or older Unix systems you need to update bash.\r\n\r\n```bash\r\nbrew install bash\r\nchsh\r\nbrew install bash-completion\r\n```\r\n\r\nAutocompletion can be enabled globally\r\n\r\n```bash\r\nsudo activate-global-python-argcomplete\r\n```\r\n\r\nor locally\r\n\r\n```bash\r\n#.bashrc\r\neval \"$(register-python-argcomplete wdc)\"\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}